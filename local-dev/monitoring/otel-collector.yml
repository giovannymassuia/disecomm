receivers:
  otlp:
    protocols:
      http:
      grpc:

processors:
  # batch metrics before sending to reduce API usage
  batch:

  attributes:
    actions:
      - key: loki.resource.labels
        action: insert
        value: service_name, environment

  resource:
    attributes:
      - key: environment
        from_attribute: environment
        action: insert
      - key: service_name
        from_attribute: service.name
        action: insert

  resourcedetection/env:
    detectors: [ env ]

exporters:
  logging:
    loglevel: debug
  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      customLabel: "disecomm"
  otlp:
    endpoint: tempo:4317  # tempo container host and port
    tls:
      insecure: true
  loki:
    endpoint: "http://loki:3100/loki/api/v1/push"

extensions:
  # responsible for responding to health check calls on behalf of the collector.
  health_check:
  # fetches the collectorâ€™s performance data
  pprof:
  # serves as an http endpoint that provides live debugging data about instrumented components.
  zpages:

service:
  extensions: [ health_check, pprof, zpages ]
  pipelines:
    metrics:
      receivers: [ otlp ]
      processors: [ batch, resource, resourcedetection/env ]
      exporters: [ prometheus ]
    traces:
      receivers: [ otlp ]
      processors: [ batch, resource, resourcedetection/env ]
      exporters: [ otlp, logging ]  # name here should match the exporter name for tempo which is otlp
    logs:
      receivers: [ otlp ]
      processors: [ resourcedetection/env, resource, attributes ]
      exporters: [ loki, logging ]
